"""See:
https://github.com/ickc/tail
"""

# To use a consistent encoding
from io import open
from os import path

# Always prefer setuptools over distutils
from setuptools import find_packages, setup

# Get the long description from the README file
try:
    with open('docs/README.rst', encoding='utf-8') as f:
        long_description = f.read()
# in case the doc wasn't generated by pandoc
except: # FileNotFoundError: Python 2 doesn't has this error
    long_description = None

version = '0.1'

setup(
    name='tail',

    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # https://packaging.python.org/en/latest/single_source_version.html
    version=version,

    description='CMB Flat Sky map to spectra',
    long_description=long_description,

    # The project's main homepage.
    url='https://github.com/ickc/tail',

    # Author details
    author='Kolen Cheung',
    author_email='christian.kolen@gmail.com',

    # Choose your license
    license='GPLv3',

    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        'Development Status :: 3 - Alpha',

        # Indicate who your project is intended for
        'Environment :: Console',
        'Intended Audience :: End Users/Desktop',
        'Intended Audience :: Developers',

        # Pick your license as you wish (should match "license" above)
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',

        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        # https://pypi.python.org/pypi?%3Aaction=list_classifiers
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: Implementation :: CPython',
    ],

    # What does your project relate to?
    keywords='cmb analysis',

    # You can just specify the packages manually here if your project is
    # simple. Or you can use find_packages().
    packages=find_packages(exclude=['docs', 'tests']),

    # Alternatively, if you want to distribute just a my_module.py, uncomment
    # this:
    #   py_modules=["my_module"],

    # List run-time dependencies here.  These will be installed by pip when
    # your project is installed. For an analysis of "install_requires" vs pip's
    # requirements files see:
    # https://packaging.python.org/en/latest/requirements.html
    # install_requires=['pyyaml', 'yamlordereddictloader'],

    # List additional groups of dependencies here (e.g. development
    # dependencies). You can install these using the following syntax,
    # for example:
    # $ pip install -e .[dev,test]
    extras_require={
        'dev': ['check-manifest'],
        'test': ['pep8', 'pylint', 'pytest', 'pytest-cov', 'coverage', 'coveralls', 'future'],
    },

    # If there are data files included in your packages that need to be
    # installed, specify them here.  If using Python 2.6 or less, then these
    # have to be included in MANIFEST.in as well.
    # package_data={
    #     'sample': ['package_data.dat'],
    # },

    # Although 'package_data' is the preferred approach, in some case you may
    # need to place data files outside of your packages. See:
    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa
    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'
    # data_files=[('my_data', ['data/data_file'])],

    # To provide executable scripts, use entry points in preference to the
    # "scripts" keyword. Entry points provide cross-platform support and allow
    # pip to create the appropriate form of executable for the target platform.
    entry_points={
        'console_scripts': [
            'iterative_map = tail.pipeline.iterative_map:cli',
            # see pairs below
            'collect_weight_db = tail.pipeline.collect_weight_db:cli',
            'mask = tail.pipeline.mask:cli',
            'mode_coupling_matrix = tail.pipeline.mode_coupling_matrix:cli',
            'null_spectra = tail.pipeline.null_spectra:cli',
            'pseudo_spectra_selection = tail.pipeline.pseudo_spectra_selection:cli',
            'pseudospectra_iter = tail.pipeline.pseudospectra_iter:cli',
            'pseudospectra_mpi = tail.pipeline.pseudospectra_mpi:cli',
            # .py are here for backward compatibility
            'collect_weight_db.py = tail.pipeline.collect_weight_db:cli',
            'mask.py = tail.pipeline.mask:cli',
            'mode_coupling_matrix.py = tail.pipeline.mode_coupling_matrix:cli',
            'null_spectra.py = tail.pipeline.null_spectra:cli',
            'pseudo_spectra_selection.py = tail.pipeline.pseudo_spectra_selection:cli',
            'pseudospectra_iter.py = tail.pipeline.pseudospectra_iter:cli',
            'pseudospectra_mpi.py = tail.pipeline.pseudospectra_mpi:cli',
        ],
    },
)
